[{"C:\\Users\\Marko\\Desktop\\Projekat\\front-end\\src\\index.tsx":"1","C:\\Users\\Marko\\Desktop\\Projekat\\front-end\\src\\reportWebVitals.ts":"2","C:\\Users\\Marko\\Desktop\\Projekat\\front-end\\src\\components\\Login\\login.tsx":"3","C:\\Users\\Marko\\Desktop\\Projekat\\front-end\\src\\components\\AppBanner\\banner.tsx":"4","C:\\Users\\Marko\\Desktop\\Projekat\\front-end\\src\\components\\MainMenu\\MainMenu.tsx":"5","C:\\Users\\Marko\\Desktop\\Projekat\\front-end\\src\\components\\Login\\Login.tsx":"6","C:\\Users\\Marko\\Desktop\\Projekat\\front-end\\src\\components\\StudentRegistration\\StudentRegistration.tsx":"7","C:\\Users\\Marko\\Desktop\\Projekat\\front-end\\src\\components\\NewTest\\NewTest.tsx":"8","C:\\Users\\Marko\\Desktop\\Projekat\\front-end\\src\\components\\TestList\\TestList.tsx":"9","C:\\Users\\Marko\\Desktop\\Projekat\\front-end\\src\\api\\api.ts":"10","C:\\Users\\Marko\\Desktop\\Projekat\\front-end\\src\\config\\api.config.ts":"11"},{"size":1992,"mtime":1615988085516,"results":"12","hashOfConfig":"13"},{"size":425,"mtime":499162500000,"results":"14","hashOfConfig":"13"},{"size":2037,"mtime":1607602049062,"results":"15","hashOfConfig":"13"},{"size":383,"mtime":1615138810760,"results":"16","hashOfConfig":"13"},{"size":1721,"mtime":1615755413577,"results":"17","hashOfConfig":"13"},{"size":4750,"mtime":1616007656428,"results":"18","hashOfConfig":"13"},{"size":4477,"mtime":1615925601991,"results":"19","hashOfConfig":"13"},{"size":1849,"mtime":1615933987868,"results":"20","hashOfConfig":"13"},{"size":3691,"mtime":1616022269655,"results":"21","hashOfConfig":"13"},{"size":3990,"mtime":1615916820620,"results":"22","hashOfConfig":"13"},{"size":69,"mtime":1615917239177,"results":"23","hashOfConfig":"13"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},"iitwkd",{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"31"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"38","usedDeprecatedRules":"26"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"41","usedDeprecatedRules":"26"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"44","usedDeprecatedRules":"26"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"47","messages":"48","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"49","usedDeprecatedRules":"26"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},"C:\\Users\\Marko\\Desktop\\Projekat\\front-end\\src\\index.tsx",[],["52","53"],"C:\\Users\\Marko\\Desktop\\Projekat\\front-end\\src\\reportWebVitals.ts",[],"C:\\Users\\Marko\\Desktop\\Projekat\\front-end\\src\\components\\Login\\login.tsx",[],["54","55"],"C:\\Users\\Marko\\Desktop\\Projekat\\front-end\\src\\components\\AppBanner\\banner.tsx",[],"C:\\Users\\Marko\\Desktop\\Projekat\\front-end\\src\\components\\MainMenu\\MainMenu.tsx",[],"C:\\Users\\Marko\\Desktop\\Projekat\\front-end\\src\\components\\Login\\Login.tsx",["56","57"],"import React from \"react\";\r\nimport \"./Login.css\";\r\nimport { Alert, Button, Col, Container, Form, Modal } from \"react-bootstrap\";\r\nimport { ECONNRESET } from \"constants\";\r\nimport api, { ApiResponse, saveToken, saveRefreshToken, saveRole, saveUserInfo } from \"../../api/api\";\r\nimport { Redirect } from \"react-router-dom\";\r\n\r\n\r\ninterface LoginPageState{\r\n  username: string\r\n  password: string\r\n  role: \"student\" | \"profesor\"\r\n  errorMessage: string\r\n  isLoggedIn: boolean\r\n  userId: number | undefined\r\n}\r\n\r\nexport class Login extends React.Component {\r\n\r\n  state: LoginPageState;\r\n\r\n  constructor(props: {} | Readonly<{}>){\r\n    super(props)\r\n\r\n    this.state = {\r\n      username: \"\",\r\n      password: \"\",\r\n      role: \"student\",\r\n      errorMessage: \"\",\r\n      isLoggedIn: false,\r\n      userId: undefined\r\n    }\r\n  };\r\n\r\n  private doLogin() {\r\n    const path = `auth/${this.state.role}/login/`;\r\n    const data = {\r\n      username: this.state.username,\r\n      password: this.state.password\r\n    }\r\n    \r\n    api(\r\n      path,\r\n      \"post\",\r\n      data,\r\n      this.state.role\r\n      )\r\n      \r\n    .then((res: ApiResponse) => {\r\n     \r\n      if(res.status === \"error\") {\r\n        this.errorMessageChange(\"Could you try that again please\")\r\n        return;\r\n      }\r\n        \r\n        if(res.data.statusCode !== undefined){\r\n          switch (res.data.statusCode) {\r\n            case -3001: this.errorMessageChange('This user does not exist!'); break;\r\n            case -3002: this.errorMessageChange('Bad password!'); break;\r\n        }\r\n          \r\n          return;\r\n        }\r\n        console.log(res);\r\n        this.setUserId(res.data.id);\r\n        this.setLoginState(true);\r\n        \r\n        saveToken(this.state.role, res.data.token);\r\n        saveRefreshToken(this.state.role, res.data.refreshToken);\r\n        saveRole(this.state.role);\r\n        console.log(res.data.userInfo);\r\n        saveUserInfo(res.data.userIfno);\r\n\r\n \r\n    })\r\n  }\r\n\r\n  private setUserId(id: number){\r\n    const newState = Object.assign(this.state, { \r\n      userId: id\r\n    })\r\n    \r\n    this.setState(newState);\r\n    \r\n  } \r\n\r\n   private formInputChangeHandler(event: React.ChangeEvent<HTMLInputElement>){\r\n    const newState = Object.assign(this.state, { \r\n      [event.target.id ]: event.target.value\r\n    })\r\n    \r\n    this.setState(newState);\r\n    console.log(this.state);\r\n  } \r\n  private errorMessageChange(message: string) {\r\n    const newState = Object.assign(this.state,{\r\n      errorMessage: message\r\n    })\r\n    this.setState(newState);\r\n  }\r\n  private setLoginState(loginState: boolean) {\r\n    const newState = Object.assign(this.state,{\r\n      isLoggedIn: loginState\r\n    })\r\n    this.setState(newState);\r\n  }\r\n\r\n  render() {\r\n     if(this.state.isLoggedIn === true) {\r\n      const role = this.state.role;\r\n      const userId = this.state.userId;\r\n    \r\n      const newRoute = `api/${role}/${userId}/moji_testovi`\r\n      return (\r\n     \r\n        <Redirect to = {newRoute}></Redirect>\r\n        \r\n       \r\n      )\r\n    } \r\n    return (\r\n      <Container>\r\n        <Col md = {{ span:6, offset: 3} }>\r\n        <p id = \"formMassage\">Ulogujte se da bi ste koristili aplikaciju</p>\r\n        <Form>\r\n          <Form.Group >\r\n            <Form.Label htmlFor = \"username\">Korisnicko ime/Indeks</Form.Label>\r\n            <Form.Control \r\n              id = \"username\" \r\n              type = \"username\" \r\n              value = { this.state.username }\r\n              onChange = {event=>{this.formInputChangeHandler(event as any)}}\r\n              />\r\n          </Form.Group>\r\n          <Form.Group >\r\n            <Form.Label htmlFor = \"password\">Lozinka</Form.Label>\r\n            <Form.Control  \r\n              id = \"password\"\r\n              type = \"password\"\r\n              value = { this.state.password }\r\n              onChange = {event=>{this.formInputChangeHandler(event as any)}}\r\n               />\r\n          </Form.Group>\r\n          <Form.Group >\r\n          <Form.Label htmlFor = \"role\">Ja sam</Form.Label>\r\n          <Form.Control \r\n              id = \"role\"\r\n              as = \"select\" \r\n              custom\r\n              onChange = {event => {this.formInputChangeHandler(event as any)}} >\r\n            <option value = \"student\" id = \"student\">Student</option>\r\n            <option value = \"profesor\" id = \"profesor\">Profesor</option>\r\n          </Form.Control>\r\n          </Form.Group>\r\n          {this.state.errorMessage ? <Alert variant = \"danger\" >{ this.state.errorMessage }</Alert> : null }\r\n          <Button \r\n            variant = \"primary\"\r\n            type = \"submit\"\r\n            onClick= { () => this.doLogin() }>\r\n            Uloguj se\r\n          </Button>\r\n        </Form>\r\n        </Col>\r\n        \r\n      </Container>\r\n\r\n\r\n    )\r\n  }\r\n\r\n\r\n}","C:\\Users\\Marko\\Desktop\\Projekat\\front-end\\src\\components\\StudentRegistration\\StudentRegistration.tsx",["58","59"],"import React from \"react\";\r\nimport { Alert, Button, Col, Container, Form } from \"react-bootstrap\";\r\nimport api, { ApiResponse, saveRefreshToken, saveToken } from \"../../api/api\";\r\nimport \"./StudentRegistration.css\";\r\n\r\n\r\n\r\n\r\ninterface StudentRegistrationPageState{\r\n  username: string \r\n  password: string\r\n  forename:string\r\n  surname: string\r\n  errorMessage?: string\r\n  isRegistrationComplited: boolean\r\n\r\n}\r\n\r\n\r\nexport class StudentRegistration extends React.Component {\r\n    state: StudentRegistrationPageState\r\n\r\n  constructor(props: {} | Readonly<{}>){\r\n    super(props)\r\n\r\n      this.state = {\r\n        isRegistrationComplited:false,\r\n        username: \"\",\r\n        password: \"\",\r\n        forename: \"\",\r\n        surname: \"\",\r\n\r\n      }\r\n    \r\n  }\r\n\r\n  private compliteRegistration() {\r\n    const regEx = \"/^[0-9]{10}$/\";\r\n    if(!this.state.username.match(regEx)){\r\n      this.errorMessageChange(\"Username must contain 10 numbers and nothing else\");\r\n      return;\r\n    }\r\n\r\n    const path = \"http://localhost:3000/api/student/\";\r\n    const data = {\r\n      username: this.state.username,\r\n      password: this.state.password,\r\n      forename: this.state.forename,\r\n      surname: this.state.surname\r\n    }\r\n    \r\n    api(\r\n      path,\r\n      \"post\",\r\n      data,\r\n      \"profesor\"\r\n      )\r\n      \r\n    .then((res: ApiResponse) => {\r\n     console.log(res);\r\n      if(res.status === \"error\") {\r\n        this.errorMessageChange(\"Could you try that again please\")\r\n        return;\r\n      }\r\n        \r\n        if(res.data.statusCode !== undefined){\r\n          switch (res.data.statusCode) {\r\n            case -1001: this.errorMessageChange('This user already exists!');\r\n            console.log(res);\r\n            break;\r\n            \r\n        }\r\n          \r\n          return;\r\n        }\r\n        console.log(res);\r\n        this.errorMessageChange('');\r\n        this.RegistratinComplite();\r\n\r\n    })\r\n  }\r\n  \r\n\r\n  render() {\r\n    return (\r\n      <Container >\r\n        <p className = \"text-center lead\">Registracija studenta</p>\r\n        <Col md = {{ span:6, offset: 3} } >\r\n          <Form className = \"px-lg-5\">\r\n            <Form.Group>\r\n              <Form.Label>Username</Form.Label>\r\n              <Form.Control\r\n                id = \"username\" \r\n                type=\"username\"\r\n                required\r\n                value = { this.state.username }\r\n                onChange = {event=>{this.formInputChangeHandler(event as any)}}/>\r\n            </Form.Group>\r\n            <Form.Group>\r\n              <Form.Label>Ime</Form.Label>\r\n              <Form.Control\r\n                id = \"forename\"\r\n                required\r\n                value = { this.state.forename }\r\n                onChange = {event=>{this.formInputChangeHandler(event as any)}}/>\r\n            </Form.Group>\r\n            <Form.Group>\r\n              <Form.Label>Prezime</Form.Label>\r\n              <Form.Control\r\n                id = \"surname\"\r\n                required\r\n                value = { this.state.surname} \r\n                onChange = {event=>{this.formInputChangeHandler(event as any)}}/>\r\n            </Form.Group>\r\n            <Form.Group>\r\n              <Form.Label>Lozinka</Form.Label>\r\n              <Form.Control\r\n                id = \"password\" \r\n                type=\"password\"\r\n                required\r\n                value = { this.state.password}\r\n                onChange = {event=>{this.formInputChangeHandler(event as any)}} />\r\n            </Form.Group>\r\n            {this.state.errorMessage ? <Alert variant = \"danger\" >{ this.state.errorMessage }</Alert> : null }\r\n            <Button\r\n              variant=\"primary\"\r\n              type=\"submit\"\r\n              onClick= { () => this.compliteRegistration() }>\r\n              Prijavi studenta\r\n            </Button>\r\n          </Form>\r\n        </Col>\r\n      </Container>\r\n\r\n\r\n    )\r\n  }\r\n  private formInputChangeHandler(event: React.ChangeEvent<HTMLInputElement>){\r\n    const newState = Object.assign(this.state, { \r\n      [event.target.id ]: event.target.value\r\n    })\r\n    \r\n    this.setState(newState);\r\n    console.log(this.state);\r\n  }\r\n  private errorMessageChange(message: string) {\r\n    const newState = Object.assign(this.state,{\r\n      errorMessage: message\r\n    })\r\n    this.setState(newState);\r\n  }\r\n  private RegistratinComplite() {\r\n    const newState = Object.assign(this.state,{\r\n      isRegistrationComplited: true\r\n    })\r\n    this.setState(newState);\r\n  } \r\n}\r\n\r\nexport default StudentRegistration","C:\\Users\\Marko\\Desktop\\Projekat\\front-end\\src\\components\\NewTest\\NewTest.tsx",["60"],"import React from \"react\";\r\nimport { Button, Col, Container, Form } from \"react-bootstrap\";\r\n\r\n\r\ninterface NewTestState {\r\n  name: string\r\n  duration: number\r\n  professorId: number | undefined\r\n}\r\n\r\nexport class NewTest extends React.Component {\r\n  state: NewTestState;\r\n  constructor(props: {} | Readonly<{}>) {\r\n    super(props)\r\n\r\n    this.state = {\r\n      name: \"\",\r\n      duration: 30,\r\n      professorId: undefined\r\n    }\r\n  }\r\n\r\n\r\n\r\n  private createTest() {\r\n    const data = {\r\n      name:this.state.name\r\n    }\r\n  }\r\n\r\n\r\n  render() {\r\n    return (\r\n      <Container className = \"pt-5\">\r\n        <p className = \"text-center lead\" >Kreiranje testa</p>\r\n        <Col md = {{span: 8, offset: 2}}>\r\n          <Form>\r\n            <Form.Group >\r\n              <Form.Label>Naziv testa</Form.Label>\r\n              <Form.Control\r\n                id = \"name\"\r\n                type=\"username\"\r\n                value = {this.state.name}\r\n                onChange = {event=>{this.formInputChangeHandler(event as any)}} />\r\n            </Form.Group>\r\n            <Form.Group>\r\n              <Form.Label>Vreme trajanja</Form.Label>\r\n              <Form.Control\r\n                id = \"duration\" \r\n                type = \"number\"\r\n                value = {this.state.duration}\r\n                onChange = {event=>{this.formInputChangeHandler(event as any)}}/>\r\n            </Form.Group>\r\n            <Button \r\n              variant=\"primary\" \r\n              type=\"submit\">\r\n              Sacuvaj\r\n            </Button>\r\n          </Form>\r\n        </Col>\r\n      </Container>\r\n\r\n\r\n    )\r\n  }\r\n  formInputChangeHandler(event: React.ChangeEvent<HTMLInputElement>) {\r\n    const newState = Object.assign(this.state, { \r\n      [event.target.id ]: event.target.value\r\n    })\r\n    this.setState(newState);\r\n    console.log(newState);\r\n  }\r\n}\r\n\r\nexport default NewTest","C:\\Users\\Marko\\Desktop\\Projekat\\front-end\\src\\components\\TestList\\TestList.tsx",["61","62"],"C:\\Users\\Marko\\Desktop\\Projekat\\front-end\\src\\api\\api.ts",["63"],"import axios, { AxiosRequestConfig, AxiosResponse } from \"axios\";\r\nimport { getTokenSourceMapRange } from \"typescript\";\r\nimport { ApiConfig } from \"../config/api.config\";\r\n\r\nexport interface ApiResponse {\r\n\tstatus: \"ok\" | \"error\" | \"login\";\r\n\tdata: any;\r\n}\r\nexport function saveToken(role: string, token: string) {\r\n\tlocalStorage.setItem(`api_token_${role}`, token);\r\n}\r\nexport function saveRefreshToken(role: string, token: string) {\r\n\tlocalStorage.setItem(`api_refresh_token_${role}`, token);\r\n}\r\nexport function getRole(): string | null {\r\n\treturn localStorage.getItem(\"role\");\r\n}\r\nexport function saveRole(role: string) {\r\n\treturn localStorage.setItem(\"role\", role);\r\n}\r\nexport function saveUserInfo(info: { forename: string; surname: string }) {\r\n\tlocalStorage.setItem(\"forename\", info.forename);\r\n\tlocalStorage.setItem(\"surname\", info.surname);\r\n}\r\nfunction getToken(role: string): string {\r\n\tconst token = localStorage.getItem(`api_token_${role}`);\r\n\treturn \"Berer \" + token;\r\n}\r\n\r\nfunction getRefreshToken(role: string): string {\r\n\tconst token = localStorage.getItem(`api_refresh_token_${role}`);\r\n\treturn token + \"\";\r\n}\r\n\r\nexport default function api(\r\n\tpath: string,\r\n\tmethod: \"get\" | \"post\" | \"patch\",\r\n\tbody: any | undefined,\r\n\trole: \"student\" | \"profesor\" = \"profesor\"\r\n) {\r\n\treturn new Promise<ApiResponse>(resolve => {\r\n\t\tconst requestData = {\r\n\t\t\tmethod: method,\r\n\t\t\turl: path,\r\n\t\t\tbaseURL: ApiConfig.API_URL,\r\n\t\t\tdata: JSON.stringify(body),\r\n\t\t\theaders: {\r\n\t\t\t\t\"Content-Type\": \"application/json\",\r\n\t\t\t\tAuthorization: getToken(role),\r\n\t\t\t},\r\n\t\t};\r\n\t\tconsole.log(\"Token: \", getToken(role));\r\n\t\taxios(requestData)\r\n\t\t\t.then(res => responseHandler(res, resolve))\r\n\t\t\t.catch(async err => {\r\n\t\t\t\tif (err.response.status === 401) {\r\n\t\t\t\t\tconst newToken = await refreshToken(role);\r\n\t\t\t\t\tconsole.log(\"newToken: \", newToken);\r\n\t\t\t\t\tif (!newToken) {\r\n\t\t\t\t\t\tconst response: ApiResponse = {\r\n\t\t\t\t\t\t\tstatus: \"login\",\r\n\t\t\t\t\t\t\tdata: null,\r\n\t\t\t\t\t\t};\r\n\r\n\t\t\t\t\t\treturn resolve(response);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tsaveToken(role, newToken);\r\n\t\t\t\t\trequestData.headers[\"Authorization\"] = getToken(role);\r\n\t\t\t\t\treturn await repeatRequest(requestData, resolve);\r\n\t\t\t\t}\r\n\r\n\t\t\t\tconst response: ApiResponse = {\r\n\t\t\t\t\tstatus: \"error\",\r\n\t\t\t\t\tdata: err,\r\n\t\t\t\t};\r\n\t\t\t\treturn resolve(response);\r\n\t\t\t});\r\n\t});\r\n\r\n\tasync function responseHandler(\r\n\t\tres: AxiosResponse<any>,\r\n\t\tresolve: (value: ApiResponse) => void\r\n\t) {\r\n\t\tif (res.status < 200 || res.status >= 300) {\r\n\t\t\tconst response: ApiResponse = {\r\n\t\t\t\tstatus: \"error\",\r\n\t\t\t\tdata: res.data,\r\n\t\t\t};\r\n\t\t\tconsole.log(\"error: \");\r\n\t\t\treturn resolve(response);\r\n\t\t}\r\n\r\n\t\tconst response: ApiResponse = {\r\n\t\t\tstatus: \"ok\",\r\n\t\t\tdata: res.data,\r\n\t\t};\r\n\r\n\t\tresolve(response);\r\n\r\n\t\t//\r\n\t}\r\n\r\n\tasync function refreshToken(\r\n\t\trole: \"student\" | \"profesor\"\r\n\t): Promise<string | null> {\r\n\t\tconst path: string = `auth/${role}/refresh`;\r\n\t\tconst data = {\r\n\t\t\ttoken: getRefreshToken(role),\r\n\t\t};\r\n\t\tconst refreshTokenRequestData: AxiosRequestConfig = {\r\n\t\t\tmethod: \"post\",\r\n\t\t\turl: path,\r\n\t\t\tbaseURL: ApiConfig.API_URL,\r\n\t\t\tdata: JSON.stringify(data),\r\n\t\t\theaders: {\r\n\t\t\t\t\"Content-Type\": \"application/json\",\r\n\t\t\t},\r\n\t\t};\r\n\t\tconst refreshTokenResponse: {\r\n\t\t\tdata: {\r\n\t\t\t\ttoken: string | undefined;\r\n\t\t\t};\r\n\t\t} = await axios(refreshTokenRequestData);\r\n\t\tconsole.log(\"refreshRes: \", refreshTokenResponse);\r\n\t\tif (!refreshTokenResponse.data.token) return null;\r\n\t\treturn refreshTokenResponse.data.token;\r\n\t}\r\n\tasync function repeatRequest(\r\n\t\trequestData: AxiosRequestConfig,\r\n\t\tresolve: (value: ApiResponse) => void\r\n\t) {\r\n\t\taxios(requestData)\r\n\t\t\t.then(res => {\r\n\t\t\t\tlet response: ApiResponse;\r\n\t\t\t\tif (res.status === 401) {\r\n\t\t\t\t\tresponse = {\r\n\t\t\t\t\t\tstatus: \"login\",\r\n\t\t\t\t\t\tdata: null,\r\n\t\t\t\t\t};\r\n\t\t\t\t} else {\r\n\t\t\t\t\tresponse = {\r\n\t\t\t\t\t\tstatus: \"ok\",\r\n\t\t\t\t\t\tdata: res,\r\n\t\t\t\t\t};\r\n\t\t\t\t}\r\n\r\n\t\t\t\treturn resolve(response);\r\n\t\t\t})\r\n\t\t\t.catch(err => {\r\n\t\t\t\tconst response: ApiResponse = {\r\n\t\t\t\t\tstatus: \"error\",\r\n\t\t\t\t\tdata: err,\r\n\t\t\t\t};\r\n\r\n\t\t\t\treturn resolve(response);\r\n\t\t\t});\r\n\t}\r\n}\r\n","C:\\Users\\Marko\\Desktop\\Projekat\\front-end\\src\\config\\api.config.ts",[],{"ruleId":"64","replacedBy":"65"},{"ruleId":"66","replacedBy":"67"},{"ruleId":"64","replacedBy":"68"},{"ruleId":"66","replacedBy":"69"},{"ruleId":"70","severity":1,"message":"71","line":3,"column":47,"nodeType":"72","messageId":"73","endLine":3,"endColumn":52},{"ruleId":"70","severity":1,"message":"74","line":4,"column":10,"nodeType":"72","messageId":"73","endLine":4,"endColumn":20},{"ruleId":"70","severity":1,"message":"75","line":3,"column":28,"nodeType":"72","messageId":"73","endLine":3,"endColumn":44},{"ruleId":"70","severity":1,"message":"76","line":3,"column":46,"nodeType":"72","messageId":"73","endLine":3,"endColumn":55},{"ruleId":"70","severity":1,"message":"77","line":26,"column":11,"nodeType":"72","messageId":"73","endLine":26,"endColumn":15},{"ruleId":"70","severity":1,"message":"78","line":5,"column":8,"nodeType":"72","messageId":"73","endLine":5,"endColumn":20},{"ruleId":"70","severity":1,"message":"79","line":6,"column":10,"nodeType":"72","messageId":"73","endLine":6,"endColumn":18},{"ruleId":"70","severity":1,"message":"80","line":2,"column":10,"nodeType":"72","messageId":"73","endLine":2,"endColumn":32},"no-native-reassign",["81"],"no-negated-in-lhs",["82"],["81"],["82"],"@typescript-eslint/no-unused-vars","'Modal' is defined but never used.","Identifier","unusedVar","'ECONNRESET' is defined but never used.","'saveRefreshToken' is defined but never used.","'saveToken' is defined but never used.","'data' is assigned a value but never used.","'QuestionType' is defined but never used.","'Redirect' is defined but never used.","'getTokenSourceMapRange' is defined but never used.","no-global-assign","no-unsafe-negation"]