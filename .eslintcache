[{"C:\\Users\\Marko\\Desktop\\Projekat\\front-end\\src\\index.tsx":"1","C:\\Users\\Marko\\Desktop\\Projekat\\front-end\\src\\reportWebVitals.ts":"2","C:\\Users\\Marko\\Desktop\\Projekat\\front-end\\src\\components\\Login\\login.tsx":"3","C:\\Users\\Marko\\Desktop\\Projekat\\front-end\\src\\components\\AppBanner\\banner.tsx":"4","C:\\Users\\Marko\\Desktop\\Projekat\\front-end\\src\\components\\MainMenu\\MainMenu.tsx":"5","C:\\Users\\Marko\\Desktop\\Projekat\\front-end\\src\\components\\Login\\Login.tsx":"6","C:\\Users\\Marko\\Desktop\\Projekat\\front-end\\src\\components\\StudentRegistration\\StudentRegistration.tsx":"7","C:\\Users\\Marko\\Desktop\\Projekat\\front-end\\src\\components\\NewTest\\NewTest.tsx":"8","C:\\Users\\Marko\\Desktop\\Projekat\\front-end\\src\\components\\TestList\\TestList.tsx":"9","C:\\Users\\Marko\\Desktop\\Projekat\\front-end\\src\\api\\api.ts":"10","C:\\Users\\Marko\\Desktop\\Projekat\\front-end\\src\\config\\api.config.ts":"11","C:\\Users\\Marko\\Desktop\\Projekat\\front-end\\src\\components\\EditTest\\EditTest.tsx":"12","C:\\Users\\Marko\\Desktop\\Projekat\\front-end\\src\\components\\QuestionList\\QuestionList.tsx":"13","C:\\Users\\Marko\\Desktop\\Projekat\\front-end\\src\\components\\EditQuestion\\EditQuestion.tsx":"14","C:\\Users\\Marko\\Desktop\\Projekat\\front-end\\src\\components\\EditAnswer\\EditAnswer.tsx":"15","C:\\Users\\Marko\\Desktop\\Projekat\\front-end\\src\\components\\SpecificMainMenu\\SpecificMainMenu.tsx":"16","C:\\Users\\Marko\\Desktop\\Projekat\\front-end\\src\\components\\FinishedTests\\FinishedTests.tsx":"17","C:\\Users\\Marko\\Desktop\\Projekat\\front-end\\src\\components\\AnswerList\\AnswerList.tsx":"18","C:\\Users\\Marko\\Desktop\\Projekat\\front-end\\src\\components\\NewQuestion\\NewQuestion.tsx":"19","C:\\Users\\Marko\\Desktop\\Projekat\\front-end\\src\\components\\NewAnswer\\NewAnswer.tsx":"20","C:\\Users\\Marko\\Desktop\\Projekat\\front-end\\src\\components\\ActiveTests\\ActiveTests.tsx":"21","C:\\Users\\Marko\\Desktop\\Projekat\\front-end\\src\\components\\TestInProgress\\TestInProgress.tsx":"22","C:\\Users\\Marko\\Desktop\\Projekat\\front-end\\src\\components\\LogOutPage\\LogOutPage.tsx":"23"},{"size":3318,"mtime":1617216848347,"results":"24","hashOfConfig":"25"},{"size":425,"mtime":499162500000,"results":"26","hashOfConfig":"25"},{"size":2037,"mtime":1607602049062,"results":"27","hashOfConfig":"25"},{"size":383,"mtime":1616613751305,"results":"28","hashOfConfig":"25"},{"size":1812,"mtime":1617217240093,"results":"29","hashOfConfig":"25"},{"size":4278,"mtime":1617218735368,"results":"30","hashOfConfig":"25"},{"size":4556,"mtime":1616708408808,"results":"31","hashOfConfig":"25"},{"size":3377,"mtime":1616771277209,"results":"32","hashOfConfig":"25"},{"size":5718,"mtime":1616786404127,"results":"33","hashOfConfig":"25"},{"size":4313,"mtime":1617217622903,"results":"34","hashOfConfig":"25"},{"size":69,"mtime":1615917239177,"results":"35","hashOfConfig":"25"},{"size":4403,"mtime":1617263240884,"results":"36","hashOfConfig":"25"},{"size":4510,"mtime":1617111435935,"results":"37","hashOfConfig":"25"},{"size":3732,"mtime":1617263449723,"results":"38","hashOfConfig":"25"},{"size":4420,"mtime":1617263970300,"results":"39","hashOfConfig":"25"},{"size":1948,"mtime":1616850293819,"results":"40","hashOfConfig":"25"},{"size":4145,"mtime":1616848009240,"results":"41","hashOfConfig":"25"},{"size":4595,"mtime":1617056628573,"results":"42","hashOfConfig":"25"},{"size":2598,"mtime":1616708839863,"results":"43","hashOfConfig":"25"},{"size":3356,"mtime":1616709053668,"results":"44","hashOfConfig":"25"},{"size":3207,"mtime":1616860150619,"results":"45","hashOfConfig":"25"},{"size":8073,"mtime":1617201606964,"results":"46","hashOfConfig":"25"},{"size":813,"mtime":1617217525887,"results":"47","hashOfConfig":"25"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},"iitwkd",{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"55"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"74","messages":"75","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"78","messages":"79","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"80","messages":"81","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"94","usedDeprecatedRules":"50"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},"C:\\Users\\Marko\\Desktop\\Projekat\\front-end\\src\\index.tsx",[],["97","98"],"C:\\Users\\Marko\\Desktop\\Projekat\\front-end\\src\\reportWebVitals.ts",[],"C:\\Users\\Marko\\Desktop\\Projekat\\front-end\\src\\components\\Login\\login.tsx",[],["99","100"],"C:\\Users\\Marko\\Desktop\\Projekat\\front-end\\src\\components\\AppBanner\\banner.tsx",[],"C:\\Users\\Marko\\Desktop\\Projekat\\front-end\\src\\components\\MainMenu\\MainMenu.tsx",[],"C:\\Users\\Marko\\Desktop\\Projekat\\front-end\\src\\components\\Login\\Login.tsx",[],"C:\\Users\\Marko\\Desktop\\Projekat\\front-end\\src\\components\\StudentRegistration\\StudentRegistration.tsx",[],"C:\\Users\\Marko\\Desktop\\Projekat\\front-end\\src\\components\\NewTest\\NewTest.tsx",[],"C:\\Users\\Marko\\Desktop\\Projekat\\front-end\\src\\components\\TestList\\TestList.tsx",[],"C:\\Users\\Marko\\Desktop\\Projekat\\front-end\\src\\api\\api.ts",[],"C:\\Users\\Marko\\Desktop\\Projekat\\front-end\\src\\config\\api.config.ts",[],"C:\\Users\\Marko\\Desktop\\Projekat\\front-end\\src\\components\\EditTest\\EditTest.tsx",[],"C:\\Users\\Marko\\Desktop\\Projekat\\front-end\\src\\components\\QuestionList\\QuestionList.tsx",[],"C:\\Users\\Marko\\Desktop\\Projekat\\front-end\\src\\components\\EditQuestion\\EditQuestion.tsx",[],"C:\\Users\\Marko\\Desktop\\Projekat\\front-end\\src\\components\\EditAnswer\\EditAnswer.tsx",["101","102"],"C:\\Users\\Marko\\Desktop\\Projekat\\front-end\\src\\components\\SpecificMainMenu\\SpecificMainMenu.tsx",[],"C:\\Users\\Marko\\Desktop\\Projekat\\front-end\\src\\components\\FinishedTests\\FinishedTests.tsx",[],"C:\\Users\\Marko\\Desktop\\Projekat\\front-end\\src\\components\\AnswerList\\AnswerList.tsx",[],"C:\\Users\\Marko\\Desktop\\Projekat\\front-end\\src\\components\\NewQuestion\\NewQuestion.tsx",[],"C:\\Users\\Marko\\Desktop\\Projekat\\front-end\\src\\components\\NewAnswer\\NewAnswer.tsx",[],"C:\\Users\\Marko\\Desktop\\Projekat\\front-end\\src\\components\\ActiveTests\\ActiveTests.tsx",[],"C:\\Users\\Marko\\Desktop\\Projekat\\front-end\\src\\components\\TestInProgress\\TestInProgress.tsx",["103","104","105","106"],"import React, { Component } from 'react'\r\nimport { Alert, Button, ButtonGroup, Card, Container, FormCheck, FormGroup, ListGroup } from 'react-bootstrap'\r\nimport FormCheckInput from 'react-bootstrap/esm/FormCheckInput'\r\nimport FormCheckLabel from 'react-bootstrap/esm/FormCheckLabel'\r\nimport { Link, Redirect } from 'react-router-dom'\r\nimport api, { ApiResponse } from '../../api/api'\r\nimport { FinishedTestApiResponseDto } from '../../ApiResponseDto/FinishedTestApiResponseDto'\r\nimport { TestApiResponseDto } from '../../ApiResponseDto/TestApiResponse.dto'\r\nimport AnswerType from '../../types/AnswerTyper'\r\nimport FinishedTestType from '../../types/FinishedTestType'\r\nimport GivenAsnwerType from '../../types/GivenAnswerType'\r\nimport QuestionType from '../../types/QuestionType'\r\nimport SpecificMainMenu from '../SpecificMainMenu/SpecificMainMenu'\r\n\r\ninterface TestInProgressProperties {\r\n  match:{\r\n    params:{\r\n      tId: number\r\n    }\r\n  }\r\n}\r\ninterface TestInProgressState {\r\n  testName: string\r\n  duration: number\r\n  message: string\r\n  questions: QuestionType[]\r\n  currentQuestionIndex: number\r\n  givenAnswers: any[]\r\n  currentAnswerId: (number | null)[]\r\n  testResult?: FinishedTestType\r\n}\r\n\r\nexport default class TestInProgress extends React.Component<TestInProgressProperties> {\r\n   \r\n  state: TestInProgressState\r\n\r\n  constructor(props: TestInProgressProperties){\r\n    super(props)\r\n    \r\n    this.state = {\r\n      testName: \"\",\r\n      duration: 0,\r\n      message: \"\",\r\n      questions: [],\r\n      currentQuestionIndex: 0,\r\n      givenAnswers: [],\r\n      currentAnswerId: []\r\n    } \r\n  }\r\n\r\n   getTest(){\r\n    api(`api/test/startTest/${this.props.match.params.tId}`, \"get\", {}, \"student\")\r\n    .then((res: ApiResponse) => {\r\n      console.log(res)\r\n      if(res.status === \"error\") {\r\n        this.setMessage(\"Doslo je do greske!\")\r\n        return;\r\n      }\r\n      if(res.status === \"login\"){\r\n        this.setMessage(\"login\")\r\n        return\r\n      }\r\n      this.setMessage(\"\")\r\n    \r\n      if(res.data.questions !== undefined)\r\n        this.putDataInState(res.data);\r\n       \r\n    })\r\n    \r\n    }\r\n\r\n  endTest = () => {\r\n    this.nextQuestion()\r\n    const data = {\r\n      answerIds: this.state.givenAnswers\r\n    }\r\n   api(`api/test/finishTest/${this.props.match.params.tId}`,\"post\", data,\"student\")\r\n   .then((res:ApiResponse) => {\r\n     console.log(res)\r\n     this.setState({\r\n      testResult: res.data\r\n     })\r\n     this.setMessage(\"score\")\r\n   })\r\n  }\r\n  putDataInState(data: TestApiResponseDto) {\r\n\r\n \r\n    this.setState(Object.assign(this.state,{\r\n      testName: data.testName,\r\n      duration: data.duration,\r\n      questions: data.questions,\r\n      renderData: true\r\n    }))\r\n    console.log(this.state)\r\n    \r\n  }\r\n\r\n \r\n\r\n  render() {\r\n\r\n    if(this.state.message === \"score\"){\r\n      return(\r\n        <Container>\r\n\r\n        <Alert  variant = \"info\">\r\n          {this.state.testResult?.test?.testName}\r\n          {this.state.testResult?.isPassed === 1 ? <p>Polozili ste test</p> : <p>Niste polozili test</p>}\r\n          <p>Broj osvojenih poena {this.state.testResult?.score}</p>\r\n          <br/>\r\n          <Link to = \"/api/student/moji_testovi\">Pregled testova</Link>\r\n        </Alert>\r\n        </Container>\r\n      )\r\n    }\r\n    \r\n    if(this.state.message === \"login\") {\r\n      return <Redirect to = \"#\"></Redirect>\r\n    }\r\n\r\n\r\n    if(this.state.message !== \"\") {\r\n      let variant = \"info\";\r\n      if(this.state.message === \"Doslo je do greske\") variant = \"danger\";\r\n\r\n      return (\r\n        <Container>\r\n          <SpecificMainMenu case= {\"student\"}/>\r\n          <Alert variant = \"danger\">{this.state.message}</Alert>\r\n        </Container>    \r\n      )\r\n        \r\n    }\r\n\r\n    \r\n    const num = this.state.currentQuestionIndex\r\n    \r\n    let showButton = true;\r\n\r\n    if(num === this.state.questions.length-1) showButton = false;\r\n\r\n      return (\r\n        \r\n        <Container className=\"borderLR px-0\">\r\n          <Card>\r\n              <Card.Title className = \"px-3\">{this.state.testName}</Card.Title>\r\n              <Card.Subtitle \r\n              className = \"px-3\" \r\n              >Pitanje {num+1}/{this.state.questions.length}</Card.Subtitle>\r\n              <Card.Body className = \"mt-2 mx-0 py-2\" style = {{borderTop: \"1px black solid\"}}>\r\n                  <p>{this.state.questions[num]?.questionName}</p>\r\n                  <ListGroup className = \"mb-2\">\r\n                    {this.state.questions[num]?.numberOfCorrectAnswers > 1 ? \r\n                     this.state.questions[num]?.questionAnswers?.map(this.showAnswersCheckBox) :\r\n                     this.state.questions[num]?.questionAnswers?.map(this.showAnswersRadio) }\r\n                       \r\n                  </ListGroup>\r\n                  <ButtonGroup className = \"float-right\">\r\n                  {showButton ?\r\n                    <Button \r\n                    className = \"mr-1\"\r\n                    onClick = {this.nextQuestion} >Sledece pitanje</Button> : null }\r\n                    <Button\r\n                      onClick = {this.endTest}>Kraj rada</Button>\r\n                  </ButtonGroup>\r\n              </Card.Body>\r\n          </Card>\r\n        </Container>\r\n       \r\n      );\r\n    \r\n   \r\n  }\r\n  showAnswersRadio =  (answer: AnswerType) => {\r\n    return (\r\n      <ListGroup.Item key = {answer.questionAnswerId}>\r\n        <FormGroup>\r\n          <FormCheck>\r\n            <FormCheckInput\r\n              id = \"currentAnswerId\" \r\n              name = {`${this.state.currentQuestionIndex}`} \r\n              type = \"radio\"\r\n              value = {answer.questionAnswerId}\r\n              onChange = {this.radioClickHandler}/>\r\n            <FormCheckLabel htmlFor = {`${this.state.currentQuestionIndex}`} >{answer.answerName}</FormCheckLabel>\r\n          </FormCheck>\r\n        </FormGroup>\r\n      </ListGroup.Item>\r\n  \r\n    )\r\n  }\r\n  showAnswersCheckBox =  (answer: AnswerType) => {\r\n    return (\r\n      <ListGroup.Item key = {answer.questionAnswerId}>\r\n        <FormGroup>\r\n          <FormCheck>\r\n            <FormCheckInput\r\n              id = \"currentAnswerId\" \r\n              name = {`${this.state.currentQuestionIndex}`} \r\n              type = \"checkbox\"\r\n              value = {answer.questionAnswerId}\r\n              onChange = {this.checkBoxClickHandler}/>\r\n            <FormCheckLabel htmlFor = {`${this.state.currentQuestionIndex}`} >{answer.answerName}</FormCheckLabel>\r\n          </FormCheck>\r\n        </FormGroup>\r\n      </ListGroup.Item>\r\n  \r\n    )\r\n  }\r\n\r\n  nextQuestion = () => {\r\n    if(this.state.currentAnswerId !== []){\r\n            \r\n      this.setState(Object.assign(this.state, {\r\n        currentQuestionIndex: this.state.currentQuestionIndex + 1,\r\n        givenAnswers: [...this.state.givenAnswers, this.state.currentAnswerId],\r\n        currentAnswerId: []\r\n\r\n      }))\r\n      console.log(this.state)\r\n      return\r\n    }\r\n    this.setState(Object.assign(this.state, {\r\n      currentQuestionIndex: this.state.currentQuestionIndex + 1,\r\n    }))\r\n    console.log(this.state)\r\n\r\n  }\r\n\r\n  radioClickHandler = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n  \r\n    this.setState(Object.assign(this.state,{\r\n      currentAnswerId: +[event.target.value]\r\n    }))\r\n    console.log(this.state)\r\n  }\r\n\r\n  checkBoxClickHandler = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n    const id = event.target.value\r\n\r\n    if(!this.state.currentAnswerId.includes(+id)){\r\n      this.setState(Object.assign(this.state,{\r\n        currentAnswerId: [...this.state.currentAnswerId, +id]\r\n      }))\r\n      console.log(this.state)\r\n      return\r\n    }\r\n    \r\n    if(this.state.currentAnswerId.length === 1){\r\n      this.setState(Object.assign(this.state,{\r\n        currentAnswerId: []\r\n      }))\r\n    }\r\n    const index = this.state.currentAnswerId.indexOf(+id)\r\n    this.state.currentAnswerId.splice(index, 1);\r\n    console.log(this.state)\r\n\r\n  }\r\n\r\n\r\n\r\n\r\n  setMessage(message: string) {\r\n    this.setState(Object.assign(this.state,{\r\n      message: message\r\n    }));\r\n  }\r\n\r\n  componentDidMount() {\r\n    console.warn(\"render\")\r\n    this.getTest();\r\n    \r\n  }\r\n}\r\n","C:\\Users\\Marko\\Desktop\\Projekat\\front-end\\src\\components\\LogOutPage\\LogOutPage.tsx",[],{"ruleId":"107","replacedBy":"108"},{"ruleId":"109","replacedBy":"110"},{"ruleId":"107","replacedBy":"111"},{"ruleId":"109","replacedBy":"112"},{"ruleId":"113","severity":1,"message":"114","line":90,"column":9,"nodeType":"115","messageId":"116","endLine":90,"endColumn":22},{"ruleId":"113","severity":1,"message":"117","line":106,"column":11,"nodeType":"115","messageId":"116","endLine":106,"endColumn":13},{"ruleId":"113","severity":1,"message":"118","line":1,"column":17,"nodeType":"115","messageId":"116","endLine":1,"endColumn":26},{"ruleId":"113","severity":1,"message":"119","line":7,"column":10,"nodeType":"115","messageId":"116","endLine":7,"endColumn":36},{"ruleId":"113","severity":1,"message":"120","line":11,"column":8,"nodeType":"115","messageId":"116","endLine":11,"endColumn":23},{"ruleId":"113","severity":1,"message":"121","line":125,"column":55,"nodeType":"115","messageId":"116","endLine":125,"endColumn":62},"no-native-reassign",["122"],"no-negated-in-lhs",["123"],["122"],["123"],"@typescript-eslint/no-unused-vars","'correctAnswer' is assigned a value but never used.","Identifier","unusedVar","'st' is assigned a value but never used.","'Component' is defined but never used.","'FinishedTestApiResponseDto' is defined but never used.","'GivenAsnwerType' is defined but never used.","'variant' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]